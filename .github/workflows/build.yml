name: Build, Test and Publish CIETools

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86_64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install build dependencies
        run: pip install setuptools wheel

      - name: Set up QEMU (cross compile arm64 on linux)
        if: matrix.arch == 'arm64' && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y qemu-user-static

      - name: Set up macOS-specific compile flags
        if: matrix.os == 'macos-latest'
        run: |
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            export EXTRA_COMPILE_ARGS="-target arm64-apple-macos11 -O3 -ffast-math"
          else
            export EXTRA_COMPILE_ARGS="-target x86_64-apple-macos11 -O3 -ffast-math"
          fi
        shell: bash

      - name: Build wheel
        run: python setup.py bdist_wheel
        env:
          EXTRA_COMPILE_ARGS: ${{ env.EXTRA_COMPILE_ARGS }}

      - name: Repair Linux wheel with auditwheel
        if: matrix.os == 'ubuntu-latest'
        run: |
          pip install auditwheel
          for whl in dist/*.whl; do
            auditwheel repair "$whl" -w dist/
          done
      - name: Remove old non-manylinux wheels
        if: matrix.os == 'ubuntu-latest'
        run: |
          rm dist/*-linux_x86_64.whl

      - name: Upload built wheels
        uses: actions/upload-artifact@v4
        with:
          name: cietools-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*.whl

      - name: Install the built wheel on Unix
        if: runner.os != 'Windows'
        run: pip install dist/*.whl

      - name: Install the built wheel on Windows
        if: runner.os == 'Windows'
        shell: powershell
        run: pip install (Get-ChildItem dist\*.whl).FullName

      - name: Run tests
        run: python tests/test_all.py

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Download Ubuntu x86_64 wheel
        uses: actions/download-artifact@v4
        with:
          name: cietools-ubuntu-latest-x86_64
          path: wheels

      - name: Download macOS x86_64 wheel
        uses: actions/download-artifact@v4
        with:
          name: cietools-macos-latest-x86_64
          path: wheels

      - name: Download macOS arm64 wheel
        uses: actions/download-artifact@v4
        with:
          name: cietools-macos-latest-arm64
          path: wheels

      - name: Download Windows x86_64 wheel
        uses: actions/download-artifact@v4
        with:
          name: cietools-windows-latest-x86_64
          path: wheels

      - name: Install Twine
        run: |
          pip install pkginfo>=1.12.0
          pip install twine==6.0.0

      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: twine upload wheels/*.whl